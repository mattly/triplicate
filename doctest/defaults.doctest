    >> $:.unshift File.dirname(__FILE__)
    doctest_require: 'doctest_helper'

# Default and Placeholder Values

You can define placeholder values for a particular field, if the value is missing, the placeholder will be offered instead:
	
	doctest: field definition with a placeholder
	>> class Form < Triplicate
			field :author, :placeholder => 'anonymous'
			end
    >> doc = {}
	>> form = Form.new(doc)
	>> form[:author]
	=> "anonymous"
    
However this does not set any actual values:

	>> doc
	=> {}

This only provides a fallback for a missing value:

	>> form = Form.new({'author' => 'mattly'})
	>> form[:author]
	=> "mattly"

Alternately, you can define default values. Provided there is no existing truthy value, these will be set on the document the first time the field is accessed, including when `#process!` is called.

    doctest: field definition with a default
    >> class Form < Triplicate
            field :language, :default => "English"
            end
    >> doc = {}
    >> form = Form.new(doc)
    >> doc["language"]
    => nil
    >> form[:language]
    => "English"
    >> doc
    => {"language" => "English"}

If you supply a Proc to either `:placeholder` or `:default`, it will be instance_eval'd on an `OpenStruct` representation of the form. Note that a placeholder Proc will be called *each time* the placeholder is accessed.

    doctest: field definitions with default and placeholder procs
    >> class Form < Triplicate
            field :value
            field :empty, :placeholder => lambda{ value }
            field :defaulted, :default => lambda{ value }
            end
    >> doc = {"value" => "thing"}
    >> form = Form.new(doc)
    >> form[:empty]
    => "thing"
    >> form[:value] = "another"
    >> form[:empty]
    => "another"
    >> doc["empty"]
    => nil
    
    >> form[:defaulted]
    => "another"
    >> form[:value] = "yet another"
    >> form[:defaulted]
    => "another"
    >> doc["defaulted"]
    => "another"

If you haven't yet accessed a field with a default by the time `#process!` is called, it will be set then:
    
    doctest: field definitions with defaults get set on #process!
    >> class Form < Triplicate
            field :updated_at, :default => lambda{ Time.now }
            end
    >> doc = {}
    >> form = Form.new(doc)
    >> now = Time.now
    >> form.process!
    >> doc["updated_at"].to_i == now.to_i
    => true